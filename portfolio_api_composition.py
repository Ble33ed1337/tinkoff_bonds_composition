# -*- coding: utf-8 -*-
import os
import sys
from collections import defaultdict
from dotenv import load_dotenv
from tinkoff.invest import Client
from tinkoff.invest.utils import quotation_to_decimal
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='portfolio_composition.log',
    filemode='w',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s'
)

load_dotenv()
TOKEN = os.getenv("TINKOFF_TOKEN")

def format_quantity(quantity):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
    return f"{quantity:,}".replace(",", " ")

def get_portfolio_composition(client):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —á–µ—Ä–µ–∑ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
        accounts = client.users.get_accounts().accounts
        broker_account = next((acc for acc in accounts if acc.type == 1), None)
        
        if not broker_account:
            print("‚ùå –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        account_id = broker_account.id
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á–µ—Ç: {account_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        portfolio = client.operations.get_portfolio(account_id=account_id)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        positions = defaultdict(lambda: {'quantity': 0, 'name': '', 'ticker': ''})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for position in portfolio.positions:
            if position.quantity.units > 0:  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                figi = position.figi
                quantity = position.quantity.units
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
                try:
                    instrument = client.instruments.get_instrument_by(id_type=1, id=figi)
                    if instrument.instrument:
                        name = instrument.instrument.name
                        ticker = instrument.instrument.ticker
                        
                        positions[figi] = {
                            'quantity': quantity,
                            'name': name,
                            'ticker': ticker
                        }
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {figi}: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º FIGI –∫–∞–∫ —Ç–∏–∫–µ—Ä
                    positions[figi] = {
                        'quantity': quantity,
                        'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'ticker': figi[:8]  # –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ FIGI
                    }
        
        return positions
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return None

def categorize_assets(positions):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤ –ø–æ —Ç–∏–ø–∞–º"""
    bonds = {}
    stocks = {}
    etfs = {}
    others = {}
    
    for figi, data in positions.items():
        ticker = data['ticker']
        name = data['name']
        quantity = data['quantity']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–∞ –ø–æ —Ç–∏–∫–µ—Ä—É
        if ticker.startswith('RU000') or '–û–§–ó' in name or '–ë–û' in name:
            bonds[ticker] = {'name': name, 'quantity': quantity}
        elif ticker.startswith('T') and ('ETF' in name or '—Ñ–æ–Ω–¥' in name):
            etfs[ticker] = {'name': name, 'quantity': quantity}
        elif len(ticker) <= 5 and not ticker.startswith('RU'):
            stocks[ticker] = {'name': name, 'quantity': quantity}
        else:
            others[ticker] = {'name': name, 'quantity': quantity}
    
    return bonds, stocks, etfs, others

def display_portfolio_composition(positions):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if not positions:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print("üìä –°–û–°–¢–ê–í –ü–û–†–¢–§–ï–õ–Ø –ß–ï–†–ï–ó API")
    print("=" * 80)
    print("–§–æ—Ä–º–∞—Ç: $—Ç–∏–∫–µ—Ç; –Ω–∞–∑–≤–∞–Ω–∏–µ; –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    print("=" * 80)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã
    bonds, stocks, etfs, others = categorize_assets(positions)
    
    # –í—ã–≤–æ–¥–∏–º –æ–±–ª–∏–≥–∞—Ü–∏–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    if bonds:
        print("\nüìä –û–ë–õ–ò–ì–ê–¶–ò–ò:")
        print("-" * 80)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–ª–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_bonds = sorted(bonds.items(), key=lambda x: x[1]['quantity'], reverse=True)
        for ticker, data in sorted_bonds:
            print(f"${ticker}; {data['name']}; {format_quantity(data['quantity'])}")
    
    # –í—ã–≤–æ–¥–∏–º –∞–∫—Ü–∏–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    if stocks:
        print("\nüìà –ê–ö–¶–ò–ò:")
        print("-" * 80)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_stocks = sorted(stocks.items(), key=lambda x: x[1]['quantity'], reverse=True)
        for ticker, data in sorted_stocks:
            print(f"${ticker}; {data['name']}; {format_quantity(data['quantity'])}")
    
    # –í—ã–≤–æ–¥–∏–º ETF (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    if etfs:
        print("\nüìä ETF:")
        print("-" * 80)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º ETF –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_etfs = sorted(etfs.items(), key=lambda x: x[1]['quantity'], reverse=True)
        for ticker, data in sorted_etfs:
            print(f"${ticker}; {data['name']}; {format_quantity(data['quantity'])}")
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—á–∏–µ –∞–∫—Ç–∏–≤—ã (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    if others:
        print("\nüîç –ü–†–û–ß–ò–ï –ê–ö–¢–ò–í–´:")
        print("-" * 80)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—á–∏–µ –∞–∫—Ç–∏–≤—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_others = sorted(others.items(), key=lambda x: x[1]['quantity'], reverse=True)
        for ticker, data in sorted_others:
            print(f"${ticker}; {data['name']}; {format_quantity(data['quantity'])}")
    
    print("\n" + "=" * 80)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_bonds = sum(data['quantity'] for data in bonds.values())
    total_stocks = sum(data['quantity'] for data in stocks.values())
    total_etfs = sum(data['quantity'] for data in etfs.values())
    total_others = sum(data['quantity'] for data in others.values())
    
    print(f"üìä –û–±–ª–∏–≥–∞—Ü–∏–π: {format_quantity(total_bonds)}")
    print(f"üìà –ê–∫—Ü–∏–π: {format_quantity(total_stocks)}")
    print(f"üìä ETF: {format_quantity(total_etfs)}")
    print(f"üîç –ü—Ä–æ—á–∏—Ö: {format_quantity(total_others)}")
    print(f"üéØ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤: {len(positions)}")
    print(f"üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format_quantity(total_bonds + total_stocks + total_etfs + total_others)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TINKOFF_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("TINKOFF_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–∞–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —á–µ—Ä–µ–∑ API Tinkoff...")
    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {TOKEN[:10]}...")
    
    try:
        with Client(TOKEN) as client:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            positions = get_portfolio_composition(client)
            
            if positions:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                display_portfolio_composition(positions)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
        print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Tinkoff")
        print("   - –ù–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")

if __name__ == "__main__":
    main()
